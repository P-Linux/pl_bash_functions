#!/bin/bash

#******************************************************************************************************************************
#
#       For more info and example usage: see the 'pl_bash_functions' package *documentation*.
#
#******************************************************************************************************************************

_THIS_SCRIPT_PATH=$(readlink -f "${BASH_SOURCE[0]}")
_TEST_SCRIPT_DIR=$(dirname "${_THIS_SCRIPT_PATH}")
_FUNCTIONS_DIR="${_TEST_SCRIPT_DIR}/../scripts"

source "${_FUNCTIONS_DIR}/trap_exit.sh"
for _signal in TERM HUP QUIT; do trap "tr_trap_exit \"$_signal\"" "$_signal"; done
trap "tr_trap_exit_interrupted" INT
# DOES NOT WORK IF 'tests_all.sh' runs because of the readonly variables:  trap "tr_trap_exit_unknown_error" ERR

source "${_FUNCTIONS_DIR}/testing.sh"
te_print_header "localization.sh"

source "${_FUNCTIONS_DIR}/msg.sh"
source "${_FUNCTIONS_DIR}/utilities.sh"
ut_source_safe_abort "${_FUNCTIONS_DIR}/localization.sh"

declare -i _COUNT_OK=0
declare -i _COUNT_FAILED=0


#******************************************************************************************************************************
# TEST: lo_generate_pot_file()
#******************************************************************************************************************************
ts_lo___lo_generate_pot_file() {
    te_print_function_msg "lo_generate_pot_file()"
    local _srcfile="${_FUNCTIONS_DIR}/msg.sh"
    local _wrong_srcfile="none_existing.sh"
    local _outdir=$(mktemp -d)
    local _pkgname="pl_bash_functions"
    local _copyright="peter1000 <https://github.com/peter1000>"
    local _copyright_start="2016"
    local _url="https://github.com/peter1000"
    local _bugs_url="https://github.com/peter1000/issue"
    local _basename; ut_basename _basename "$_srcfile"
    local _file_txt

    (lo_generate_pot_file "$_wrong_srcfile" "$_outdir" "$_pkgname" "$_copyright"  "$_copyright_start" "$_url" \
        "$_bugs_url") &> /dev/null
    te_retval_1 _COUNT_OK _COUNT_FAILED $? "Test none existing source file."

    (lo_generate_pot_file "$_srcfile" "$_outdir" "$_pkgname" "$_copyright"  "$_copyright_start" "$_url" \
        "$_bugs_url")  &> /dev/null
    te_retval_0 _COUNT_OK _COUNT_FAILED $? "Test existing source file."

    _file_txt=$(<"${_outdir}/${_basename}.pot")
    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "# Package: <pl_bash_functions> autogenerated from source-file: <m" \
        "Test pot file header TITLE."

    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "# Copyright (C) 2016 - "*"peter1000 <https://github.com/peter1000" \
        "Test pot file header Copyright."

    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "# peter1000 <https://github.com/peter1000> <https://github.com/pe" \
        "Test pot file header AUTHOR."

    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "Language-Team: LANGUAGE <https://github.com/peter1000>" \
        "Test pot file header Language-Team."

    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "Content-Type: text/plain; charset=UTF-8" \
        "Test pot file header charset."

    # CLEAN UP
    rm -rf "$_outdir"
}
ts_lo___lo_generate_pot_file


#******************************************************************************************************************************
# TEST: lo_generate_po_files()
#******************************************************************************************************************************
ts_lo___lo_generate_po_files() {
    te_print_function_msg "lo_generate_po_files()"
    local _srcfiles=("${_FUNCTIONS_DIR}/msg.sh")
    local _utf8_languages=( "de_DE.UTF-8" "en_US.UTF-8" "pt_BR.UTF-8")
    local _wrong_srcfile="none_existing.sh"
    local _outdir=$(mktemp -d)
    local _pkgname="pl_bash_functions"
    local _copyright="peter1000 <https://github.com/peter1000>"
    local _copyright_start="2016"
    local _url="https://github.com/peter1000"
    local _bugs_url="https://github.com/peter1000/issue"
    local _src_basename; ut_basename _src_basename "${_srcfiles[0]}"
    local _file_txt

    (lo_generate_po_files _srcfiles _utf8_languages "$_outdir" "$_pkgname" "$_copyright"  "$_copyright_start" "$_url" \
        "$_bugs_url") &> /dev/null
    te_retval_0 _COUNT_OK _COUNT_FAILED $? "Test existing source file."

    [[ -f ${_outdir}/${_src_basename}.pot                    && \
        -f ${_outdir}/de_DE.UTF-8/LC_MESSAGES/msg.sh_empty.po   && \
        -f ${_outdir}/en_US.UTF-8/LC_MESSAGES/msg.sh_empty.po   && \
        -f ${_outdir}/pt_BR.UTF-8/LC_MESSAGES/msg.sh_empty.po
        ]]
    te_retval_0 _COUNT_OK _COUNT_FAILED $? "Test all expected / generated .pot and .po files exist."

    _file_txt=$(<"${_outdir}/${_src_basename}.pot")
    # Header check
    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "# Package: <pl_bash_functions> autogenerated from source-file: <m" \
        "Test pot file header TITLE."

    _file_txt=$(<"${_outdir}/de_DE.UTF-8/LC_MESSAGES/msg.sh_empty.po")
    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "Last-Translator: peter1000 <https://github.com/peter1000> <https:" \
        "Test de_DE po file Last-Translator."

    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "Language-Team: LANGUAGE <https://github.com/peter1000>" \
        "Test de_DE po file Language-Team."

    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "Language: de_DE" "Test de_DE po file Language."

    _file_txt=$(<"${_outdir}/en_US.UTF-8/LC_MESSAGES/msg.sh_empty.po")
    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "Language: en_US" "Test en_US po file Language."

    _file_txt=$(<"${_outdir}/pt_BR.UTF-8/LC_MESSAGES/msg.sh_empty.po")
    te_find_info_msg _COUNT_OK _COUNT_FAILED "$_file_txt" "Language: pt_BR" "Test pt_BR po file Language."

    # CLEAN UP
    rm -rf "$_outdir"
}
ts_lo___lo_generate_po_files



#******************************************************************************************************************************

te_print_final_result "$_COUNT_OK" "$_COUNT_FAILED"


#******************************************************************************************************************************
# End of file
#******************************************************************************************************************************
